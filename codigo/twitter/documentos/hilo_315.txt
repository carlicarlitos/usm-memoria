Is there a term for the human propensity to seek “silver bullet” solutions (or look for a savior) rather than improving what exists? 
 This is what’s in play every time we vote in an outsider (then are surprised how long it takes them to ramp up), or “reinvent money” (without understanding the complex system already in use), or rewrite a whole codebase (rather than figuring out the one we have). 
 This urge is not always a negative force - sometimes systems do need disruption to get them out of established patterns that no longer serve. Sometimes the timing makes sense. 
 But the more times I see this pattern play out - in software systems, political systems, community systems - it seems like 99 times out of 100, when we burn it down &amp; rebuild...we end up rebuilding the same system. 
 What I’ve been thinking about lately is this: even when we end up with the same system, WE are changed. We worked through the problems ourselves &amp; figured out the details and muttered to ourselves a bunch, “OH, that’s why that was there.” 
 Is this a communication failure? A documentation failure? Or is there something about humans that means we need to do it ourselves to be sure? And if so, ...is that an empathy failure? 
 Maybe it’s not a failure at all. Maybe this is how groups of humans work. But all this burning of old systems has a lot of downsides. 
 I’ve been thinking about this for two reasons. 1. In the software world, over the course of 20 years working on these systems, I’ve gone from “this is terrible! rewrite it all” to “I don’t see why this needs to be here, so I must not fully understand the problem.” 
 2. In other worlds, where I don’t have as much experience understanding their systems, I still tend towards “burn it down” over “understand it better.” 
 So: am I too conservative with software systems? Should I burn it down more often? Am I not conservative enough elsewhere? Should I be working harder to figure out how things got the way they are, and what needs they serve? 
 I realized recently, though, that these aren’t the right questions. More experience understanding, changing, and replacing software systems does mean that I have a more visceral sense of the high cost of a replace, AND that I find understanding &amp; changing-in-place less daunting. 
 But there are still situations in which a rewrite or replacement is a good idea. I may miss those. I know where my bias is. I don’t need to overthink it though; I just need to make sure I have folks on my team who have the _opposite_ bias. 
 I need to work with the burn-it-down folks. And they need to work with me. We need to illuminate our respective blind spots in our search for the best solution. 
 Bias, whether it comes from your work experience or from racial privilege, can’t be overcome with more thinking. It’s literally the structure of your brain connections that’s the issue. 
 The only way to even start to counteract bias is to combine forces with someone whose brain goes the other way. 
 It’s a good start to be aware of your bias, but you won’t change it without explicitly seeking out counterparts. So in software, I need to work with the burners. In worlds where my bias is more burn-y, I need to work with the conservers. 
 I used to be annoyed by the people who were constantly proposing major changes. Let’s do it over in react native! Let’s convert our database to neo4j! Let’s try a new auth library! Let’s install the new package manager! https://t.co/2ZTNFODRYQ 
 It felt like they were constantly questioning my choices - like behind each question was a judgemental “why isn’t it already this way?” 
 But those questions are gifts. I’d never thought about using a graph database, but talking about neo4j on one project really helped me crystallize what benefits we were getting from postgres. (We stayed on postgres.) 
 But a year or two later the choice came up again, and this time we did take it - partially because the previous time had forced me to enumerate all of postgres’s advantages. Which meant I could see when they started to wear thin. 
 What’s the worst that could happen if you *always* engaged constructively with someone proposing something, even if it is OBVIOUSLY WRONG and A WASTE OF TIME TO EVEN TALK ABOUT IT? 
 It’s never a waste of time for people to feel heard. And it’s never a waste of time to re-articulate your goals &amp; see if your tech choices are meeting them. You might learn something surprising.